}
PIM
extractantes(LIX = c(58.8, 50.3, 69.1, 58.3, 57.7, 59.4), Cyanex = c(42.3, 34.6, 36.0, 46.6, 46.0, 47.5))
extractantes <- function(TotalMass = NULL, MolarRatio = NULL, LIX = NULL, Cyanex = NULL) {
if (missing(TotalMass) && missing(MolarRatio)) {
report <- cbind(TotalMass = LIX + Cyanex,
MolarRatio <- LIX * 246 / (Cyanex * 348))
} else {
LIX_MW <- 246; Cya_MW <- 348
MassRatio <- LIX_MW * MolarRatio / Cya_MW
report    <- cbind(Lix54 = (TotalMass * MassRatio) / (1 + MassRatio),
Cyanex = TotalMass / (1 + MassRatio))
}
return(report)
}
PIM
extractantes(LIX = c(58.8, 50.3, 69.1, 58.3, 57.7, 59.4), Cyanex = c(42.3, 34.6, 36.0, 46.6, 46.0, 47.5))
extractantes <- function(TotalMass = NULL, MolarRatio = NULL, LIX = NULL, Cyanex = NULL) {
if (missing(TotalMass) && missing(MolarRatio)) {
report <- cbind(TotalMass = LIX + Cyanex,
MolarRatio <- (LIX / 246) / (Cyanex / 348))
} else {
LIX_MW <- 246; Cya_MW <- 348
MassRatio <- LIX_MW * MolarRatio / Cya_MW
report    <- cbind(Lix54 = (TotalMass * MassRatio) / (1 + MassRatio),
Cyanex = TotalMass / (1 + MassRatio))
}
return(report)
}
PIM
extractantes(LIX = c(58.8, 50.3, 69.1, 58.3, 57.7, 59.4), Cyanex = c(42.3, 34.6, 36.0, 46.6, 46.0, 47.5))
curve(1/x^2)
curve(1/x^2, xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma,
"=1")))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6), xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma,
"=1")))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
xlim = c(0,0.1))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta)
xlim = c(0,0.1))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.1))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta), yaxt='n',
xlim = c(0,0.1))
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.1), axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.05), axes=FALSE, frame.plot=TRUE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
{
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE, add=TRUE, color = 2)
}
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE, add=TRUE, color = 2)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), frame.plot=TRUE, add=TRUE, color = 2)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), frame.plot=TRUE, add=TRUE, col = 2)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), frame.plot=TRUE, add=TRUE, col = 2)
curve(1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6),
xlab = expression(paste(eta^-2, "Sampled values, ", mu, "=5, ", sigma, "=1")),
ylab = expression(Lambda/eta),
xlim = c(0,0.2), add=TRUE, col = 2)
x=seq(0, 0.2, length.out = 200)
x=seq(0, 0.2, length.out = 200)
y1=1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
y2=1.6e-19*96485/(6*pi*(1.5e-10+0.0002x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
y2=1.6e-19*96485/(6*pi*(1.5e-10+0.0002*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(1,2,each=length(x)))
dat
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c(1,2),each=length(x)))
dat
ggplot(data = dat, aes(x=x, y=y)) + geom_line()
library(ggplot2)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c(1,2),each=length(x)))
ggplot(data = dat, aes(x=x, y=y)) + geom_line()
ggplot(data = dat, aes(x=x, y=y, group=model)) + geom_line()
ggplot(data = dat, aes(x=x, y=y, group=model, color= model)) + geom_line()
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c(A,B),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, group=model, color= model)) + geom_line()
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, group=model, color= model)) + geom_line()
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line()
y2=1.6e-19*96485/(6*pi*(1.5e-10+0.00000002*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line()
y2=1.6e-19*96485/(6*pi*(1.5e-10+1e-10*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
library(ggplot2)
x=seq(0, 0.2, length.out = 200)
y1=1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
y2=1.6e-19*96485/(6*pi*(1.5e-10+1e-10*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line()
y2=1.6e-19*96485/(6*pi*(1.5e-10+1e-12*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line()
y2=1.6e-19*96485/(6*pi*(1.5e-10+1e-10*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line()
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank())
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(), axis.text.y=element_blank())
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(), axis.text.y=element_blank()) +
xlab(label = expression(x,[w])) + ylab(label = expression(Lambda/eta))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(), axis.text.y=element_blank()) +
xlab(label = expression(x[w])) + ylab(label = expression(Lambda/eta))
library(ggplot2)
x=seq(0, 0.2, length.out = 200)
y1=1.6e-19*96485/(6*pi*1.5e-10)*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
y2=1.6e-19*96485/(6*pi*(1.5e-10+1e-10*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(), axis.text.y=element_blank()) +
xlab(label = expression(x[w])) + ylab(label = expression(Lambda/eta))
y2=1.6e-19*96485/(6*pi*(1.5e-10+2e-10*x))*((1-x)*90^(1/3)+x*0.89^(1/3))^(-6)
dat=data.frame(x=c(x, x), y = c(y1, y2), model=rep(c('A','B'),each=length(x)))
ggplot(data = dat, aes(x=x, y=y, color= model)) + geom_line() +
theme(axis.text.x=element_blank(), axis.text.y=element_blank()) +
xlab(label = expression(x[w])) + ylab(label = expression(Lambda/eta))
1.52*0.39131
1/0.018
1.52*0.39131/1000
8.8/(1.52*0.39131/1000)
1.52*0.997
1.52*0.997*0.39131/1000
1.52*0.997*0.39131
8.8/1.52*0.997*0.39131
8.8/(1.52*0.997*0.39131)
1.52*0.997/0.39131
8.8/(1.52*0.997/0.39131)
8.8/(1.52*0.997/0.39131)/3.22
4.7/0.706
16.1*6.65
8.8/(1.52/0.39131)/3.22
8.8/(1.52/0.39131)
(1.52/0.39131)
4.7/0.704
source('~/Dropbox/0-UNAM/0-Polymeric Inclusion Membranes/Datos_Tratamiento/Simplex/Vertices1-6.R', echo=TRUE)
#-----GRÁFICOS---------------------------------------------------------------
for (i in 1:6) {
assign(x = paste0("Transporte.", i),
value = eval(parse(text = paste0("data.frame(Tiempo = c(Time.", i, ", Time.", i, "),
Conc = c(Feed.8.", i, ", Strip.8.", i, "),
Fase = rep(c('Alimentación', 'Recuperación'), each = length(Time.", i, ")))"))))
eval(parse(text = paste0("ggplot(data = Transporte.", i, ", aes(x = Tiempo, y = Conc, group = Fase)) +
geom_point(size = 3, aes(color = Fase)) + labs(y = 'Fracción transportada de litio', x = 'Tiempo (horas)') +
stat_function(fun = function(x) (0.9567 * x**2)/(1/0.1384 + x**2), color='darkgrey')")))
}
eval(parse(text = paste0("ggplot(data = Transporte.", i, ", aes(x = Tiempo, y = Conc, group = Fase)) +
geom_point(size = 3, aes(color = Fase)) + labs(y = 'Fracción transportada de litio', x = 'Tiempo (horas)') +
stat_function(fun = function(x) (0.9567 * x**2)/(1/0.1384 + x**2), color='darkgrey')")))
help(temp.name)
??temp.name
ModelS.1
ModelF.1
ModelS.3
NLS.Feed.1
NLS.Feed.1$data
summary(NLS.Feed.1)
summary(NLS.Feed.1)$Parameters
summary(NLS.Feed.1)
str(NLS.Feed.1)
install.packages('shinyMatrix')
library(shiny)
library(labsimplex)
library(ggplot2)
NaStock  <- 0.0861 * 22990 * 0.5136 / 5.1747 * 1.0230 / 10.0315
#-----CURVAS DE CALIBRACIÓN--------------------------------------------------
CurveNa.1 <- c(c(0.0000, 0.0548, 0.1433, 0.3205, 0.6178, 0.9372, 1.4929, 2.0799, 3.0523) * NaStock /
c(6.0000, 6.1328, 6.0089, 6.1254, 6.1521, 6.1531, 6.1615, 6.1384, 6.1277))
AbsNaCurve.1_1 <- c(0.000, 0.036, 0.091, 0.195, 0.362, 0.535, 0.814, 1.085, 1.449)
AbsNaCurve.1_2 <- c(0.000, 0.010, 0.011, 0.018, 0.022, 0.026, 0.040)
#----------------------------------------------------------------------------
#-----MODELOS DE LAS CURVAS--------------------------------------------------
ModelNa.1_1 <- lm(AbsNaCurve.1_1[1:7] ~ CurveNa.1[1:7])
ModelNa.1_2 <- lm(AbsNaCurve.1_1[1:8] ~ CurveNa.1[1:8])
ModelNa.1_3 <- lm(AbsNaCurve.1_1[1:9] ~ CurveNa.1[1:9])
ModelNa.1_4 <- lm(AbsNaCurve.1_1[1:9] ~ CurveNa.1[1:9] + I(CurveNa.1[1:9]^2))
ModelInvNA.1_4 <- lm(CurveNa.1 ~ AbsNaCurve.1_1 + I(AbsNaCurve.1_1^(1/2)))
plot(AbsNaCurve.1_2 ~ CurveNa.1[c(1, 4:9)], pch = c(rep(1, 8), 2))
abline(ModelNa.1_1, col = 2, lty = 2)
abline(ModelNa.1_2, col = 6, lty = 2)
abline(ModelNa.1_3, col = 8, lty = 2)
curve(0.0009461 + 0.1889774 * x - 0.0043859 * x^2, add = TRUE, col = 4)
#-----ABSORBANCIAS DE LAS ALÍCUOTAS------------------------------------------
Abs.Feed.8.X  <- c(0.494, 0.388, 0.394, 0.362, 0.575, 0.292, 0.337, 0.267, 0.460, 0.374, 0.460, 0.452)
Dil.Feed.8.X  <- c(6.0073, 6.0388, 6.1971, 6.0710, 6.0644, 6.2320, 6.0183, 6.1255, 6.1018, 6.0820, 6.1268, 6.1494) /
c(0.0583, 0.0585, 0.0585, 0.0591, 0.0600, 0.0584, 0.0586, 0.0586, 0.0586, 0.0591, 0.0593, 0.0586)
#-----CONCENTRACIÓN DE SODIO EN LAS ALÍCUOTAS--------------------------------
library(cmna)
Samples <- paste0('Mem.', c(7, '3b', 8, '6b', 9, '9b'))
#-----CONCENTRACIÓN DE SODIO EN LAS ALÍCUOTAS--------------------------------
library(cmna)
Na.Feed.8.X <- quadratic2(b2 = ModelNa.1_4$coefficients[[3]], b1 = ModelNa.1_4$coefficients[[2]],
b0 = ModelNa.1_4$coefficients[[1]] - Abs.Feed.8.X)[13:24] * Dil.Feed.8.X
Na.Feed.8.X
setwd("~/Dropbox/0-UNAM/0-Polymeric Inclusion Membranes/Datos_Tratamiento/Simplex")
source('~/Dropbox/0-UNAM/0-Polymeric Inclusion Membranes/Datos_Tratamiento/Simplex/Simplex_V_1.R', echo=TRUE)
PIM$coords[, 4] * 22990
Na.Feed.8.X
Na.Feed.8.X[1, 3, 5, 7, 9] - Na.Feed.8.X[2, 4, 6, 7, 10]
Na.Feed.8.X[c(1, 3, 5, 7, 9)] - Na.Feed.8.X[c(2, 4, 6, 7, 10)]
Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 7, 10, 12)]
152.3158-190.8637
Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)]
PIM$coords[, 4] * 22990[c(8, 7, 1, 6, 9, 9)]
(PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)]
rownames((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
colnames((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
dimnames((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
(PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)]
str((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)],)
str((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)])
(PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)]->V
attr(v)
attr(V)
attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)], "names")
Na.Fases <- data.frame(Ver <- attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)], "names"),
Teo <- (PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)],
Ini <- Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)],
Fin <- Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)],
Dif <- Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)])
Na.Fases
Ver
Na.Fases <- data.frame(Ver 0 attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)], "names"),
Teo = (PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)],
Ini = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)],
Fin = Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)],
Dif = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)])
Na.Fases
Na.Fases <- data.frame(Ver = attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)], "names"),
Teo = (PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)],
Ini = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)],
Fin = Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)],
Dif = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)])
Na.Fases
Na.Fases$Mig <- 0
Na.Fases <- data.frame(Ver = attr((PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)], "names"),
Teo = (PIM$coords[, 4] * 22990)[c(8, 7, 1, 6, 9, 9)],
Ini = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)],
Fin = Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)],
Dif = Na.Feed.8.X[c(1, 3, 5, 7, 9, 11)] - Na.Feed.8.X[c(2, 4, 6, 8, 10, 12)])
Na.Fases$Frac <- Na.Fases$Dif / Na.Fases$Ini
Na.Fases$Frac <- Na.Fases$Dif / Na.Fases$Ini * 100
Na.Fases
print(Na.Fases)
plot(ModelNa.1_1)
plot(ModelNa.1_1, which = 1)
par(mfrow = c(2, 2))
plot(ModelNa.1_1, which = 1)
par(mfrow = 1)
par(mfrow = c(1, 1)
par(mfrow = c(2, 2))
plot(ModelNa.1_1, which = 1)
plot(ModelNa.1_2, which = 1)
plot(ModelNa.1_3, which = 1)
plot(ModelNa.1_4, which = 1)
par(mfrow = c(1, 1))
plot(AbsNaCurve.1_2 ~ CurveNa.1[c(1, 4:9)], pch = c(rep(1, 8), 2))
abline(ModelNa.1_1, col = 2, lty = 2)
abline(ModelNa.1_2, col = 6, lty = 2)
abline(ModelNa.1_3, col = 8, lty = 2)
curve(0.0009461 + 0.1889774 * x - 0.0043859 * x^2, add = TRUE, col = 4)
#----------------------------------------------------------------------------
#-----MODELOS DE LAS CURVAS--------------------------------------------------
ModelNa.1_1 <- lm(AbsNaCurve.1_1[1:7] ~ CurveNa.1[1:7])
ModelNa.1_2 <- lm(AbsNaCurve.1_1[1:8] ~ CurveNa.1[1:8])
ModelNa.1_3 <- lm(AbsNaCurve.1_1[1:9] ~ CurveNa.1[1:9])
ModelNa.1_4 <- lm(AbsNaCurve.1_1[1:9] ~ CurveNa.1[1:9] + I(CurveNa.1[1:9]^2))
plot(AbsNaCurve.1_2 ~ CurveNa.1[c(1, 4:9)], pch = c(rep(1, 8), 2))
plot(AbsNaCurve.1_1 ~ CurveNa.1, pch = c(rep(1, 8), 2))
abline(ModelNa.1_1, col = 2, lty = 2)
abline(ModelNa.1_2, col = 6, lty = 2)
abline(ModelNa.1_3, col = 8, lty = 2)
curve(0.0009461 + 0.1889774 * x - 0.0043859 * x^2, add = TRUE, col = 4)
par(mfrow = c(2, 2))
plot(ModelNa.1_1, which = 1)
plot(ModelNa.1_2, which = 1)
plot(ModelNa.1_3, which = 1)
plot(ModelNa.1_4, which = 1)
par(mfrow = c(1, 1))
Na.Fases
setwd("~/Dropbox/0-UNAM/0-Polymeric Inclusion Membranes/Datos_Tratamiento/Simplex")
source("functions.R")
library(labsimplex)
memParameters <- c("CTA", "Total.Extr", "Molar.Ratio", "NaOH.Feed", "HCl.Strip")
# Molar ratio refers to LIX-54-100/Cyanex 923
initialPoint  <- c(30, 100, 2, 0.01, 0.1)
stepSize_0    <- c(-10, -20, 1, 0.005, 0.05)
PIM <- labsimplex(N = 5, var.name = memParameters, start = initialPoint, stepsize = stepSize_0)
labsimplex(usrdef = rbind(c(30, 100, 2, 0.01, 0.1), c(40, 84.138, 2, 0.01, 0.1), c(40, 104.138, 2.748, 0.01, 0.1),
c(40, 104.138, 1.748, 0.0133, 0.1), c(40, 104.138, 1.748, 0.0083, 0.1245),
c(40, 104.138, 1.748, 0.0083, 0.07456)))
plotSimplex3D(PIM)
PIM <- labsimplex(N = 5, var.name = memParameters, start = initialPoint, stepsize = stepSize_0)
labsimplex(usrdef = rbind(c(30, 100, 2, 0.01, 0.1), c(40, 84.138, 2, 0.01, 0.1), c(40, 104.138, 2.748, 0.01, 0.1),
c(40, 104.138, 1.748, 0.0133, 0.1), c(40, 104.138, 1.748, 0.0083, 0.1245),
c(40, 104.138, 1.748, 0.0083, 0.07456)))
plotSimplex3D(PIM)
plot(PIM, sel.dim = c("NaOH.Feed", "HCl.Strip"))
#extractantes(TotalMass = c(100, 84.1, rep(104.1, 4)), MolarRatio = c(2, 2, 2.75, 1.75, 1.75, 1.75))
#extractantes(LIX = c(58.8, 50.3, 69.1, 58.3, 56.9, 59.4), Cyanex = c(42.3, 34.6, 36.0, 46.6, 46.9, 47.5))
adjustVertex(PIM, newcoords = list(vertex1 = c(29.6, 101.1, 1.97, NA, NA), vertex2 = c(41.1, 84.9, 2.06, NA, NA),
vertex3 = c(40.9, 105.1, 2.72, NA, NA), vertex4 = c(41.5, 104.9, 1.77, NA, NA),
vertex5 = c(41.6, 103.8, 1.72, NA, NA), vertex6 = c(38.5, 106.9, 1.77, NA, NA)),
overwrite = TRUE)
source("Vertices1-6.R")
generateVertex(PIM, qflv = QF[, 9], overwrite = TRUE)
plotSimplex3D(PIM)
plot(PIM, sel.dim = c("NaOH.Feed", "HCl.Strip"))
#extractantes(TotalMass = 97.4, MolarRatio = 2.40)
#extractantes(LIX = c(61.1, 69.0), Cyanex = c(31.8, 35.8))
adjustVertex(PIM, newcoords = list(vertex7 = c(34.9, 92.9, 2.72, NA, NA)), overwrite = TRUE)
pdf("Trans-V_7-V_9.pdf", height = 5, width = 10)
source("Vertices7_3rep.R")
generateVertex(PIM, qflv = QF[1, 9], algor = 'variable', overwrite = TRUE)
plotSimplex3D(PIM)
plot(PIM, sel.dim = c("NaOH.Feed", "HCl.Strip"))
source("Vertices8_6rep.R")
generateVertex(PIM, qflv = 0, algor = 'variable', overwrite = TRUE)
plotSimplex3D(PIM)
plot(PIM, sel.dim = c("NaOH.Feed", "HCl.Strip"))
source("Vertices9_9rep.R")
dev.off()
PIM
source('~/Dropbox/0-UNAM/0-Polymeric Inclusion Membranes/Datos_Tratamiento/19-05-05-LiNaK-Mem9.R', echo=TRUE)
#library(ggplot2)
#library('ggformula')
library(transMem)
#-----STOCK SOLUTIONS--------------------------------------------------------
StockLi.1 <- 129.5 * 0.187872 * 0.99 / 0.1200962
StockNa.1 <- 0.0861 * 22990
StockK.1  <- 0.8264 * 39098
StockLi.1.5_1  <- StockLi.1 * 1.2484 / 50.2322
StockLi.1.5_2  <- StockLi.1 * 1.2377 / 50.1505
StockNa.1.20_1 <- StockNa.1  * 0.5136 / 5.1747 * 1.0230 / 10.0315
StockK.1.12_1  <- StockK.1 * 0.2006/10.0910*0.2227/11.9819
#-----CURVAS DE CALIBRACIÓN--------------------------------------------------
LithiumCC.1 <- data.frame(Conc = c(0.0000, 0.0652, 0.1340, 0.3044, 0.6083, 1.2322, 2.3922, 3.0645) *
StockLi.1.5_1 / c(6.0000, 6.0075, 6.0268, 6.0103, 6.0341, 6.0633, 6.0103, 6.0626),
Signal = c(0.000, 0.009, 0.018, 0.041, 0.081, 0.171, 0.310, 0.383))
Lith.NaCC.1 <- data.frame(Conc = c(0.0000, 0.0592, 0.1205, 0.2446, 0.5938, 1.2562, 2.4378, 3.0479) *
StockLi.1.5_1 / c(6.0000, 6.0992, 6.2358, 6.1827, 6.0371, 7.1252, 6.0531, 6.4249),
Signal = c(0.000, 0.009, 0.016, 0.042, 0.084, 0.149, 0.342, 0.378))
Lith.KCC.1  <- data.frame(Conc = c(0.0000, 0.0646, 0.1187, 0.2681, 0.4645, 1.0323, 2.0837, 3.2906) *
StockLi.1.5_2 / c(6.0000, 6.1436, 6.0954, 6.0805, 6.2874, 6.1209, 6.0611, 6.1164),
Signal = c(0.000, 0.008, 0.016, 0.036, 0.059, 0.135, 0.266, 0.292))
SodiumCC.1 <- data.frame(Conc = c(0.0000, 0.0548, 0.1433, 0.3205,        0.9372, 1.4929, 2.0799, 3.0523) *
StockNa.1.20_1 / c(6.0000, 6.1328, 6.0089, 6.1254,        6.1531, 6.1615, 6.1384, 6.1277),
Signal  = c(0.000, 0.021, 0.096, 0.153,        0.423, 0.679, 0.914, 1.229))
PotasiCC.1 <- data.frame(Conc = c(0.0000, 0.0500, 0.2295, 0.5153, 1.0036, 1.5286, 2.5255, 3.5000, 3.2500) *
StockK.1.12_1 / c(6.0000, 6.0302, 6.0539, 6.0109, 6.1441, 6.0810, 6.1211, 6.1925, 4.3117),
Signal = c(0.000, 0.001, 0.004, 0.008, 0.014, 0.018, 0.025, 0.029, 0.033))
#-----MODELOS DE LAS CURVAS--------------------------------------------------
calibCurve(curve = LithiumCC.1, badpoint = 8)
calibCurve(curve = Lith.NaCC.1, badpoint = 8)
calibCurve(curve = Lith.KCC.1, badpoint = 8)
calibCurve(curve = SodiumCC.1, order = 2)
calibCurve(curve = PotasiCC.1, order = 2, badpoint = 9)
#-----TIEMPOS DE LA TOMA DE ALÍCUOTAS----------------------------------------
Time.9.1 <- Time.9.2 <- c(0, 0.5, 1, 2, 3, 4.5, 6, 7, 8)
Time.9.3 <- Time.9.4 <- c(0, 1, 2, 2.5, 3, 4, 5.5, 7, 8)
Time.9.5 <- c(0, 0.5, 1, 1.75, 2.5, 3.5, 4.5, 6.5, 7)
#-----FACTOR DE DILUCIÓN DE LAS MUESTRAS-------------------------------------
dilFeed.9.1  <- c(6.0316/0.0630, 6.1093/0.0580, 6.1674/0.0594, 6.3258/0.0666, 6.0613/0.0632)
dilStrip.9.1 <- c(2.0694/0.2211, 2.0467/0.2017, 2.7017/0.1991, 2.2480/0.1968, 2.0072/0.2111)
dilFeed.9.2  <- c(6.2507/0.0622, 6.2177/0.0626, 6.1075/0.0633, 6.0882/0.0619, 6.2626/0.0628)
dilStrip.9.2 <- c(2.1284/0.2104, 2.1016/0.2071, 2.0175/0.2113, 2.0508/0.2128, 2.3938/0.2123)
dilFeed.9.3  <- c(5.9975/0.0584, 6.2463/0.0635, 6.2366/0.0613, 6.2103/0.0622, 6.4919/0.0619)
dilStrip.9.3 <- c(2.0400/0.2097, 2.0716/0.2136, 2.0115/0.2140, 2.0680/0.2135, 2.0168/0.2135)
dilFeed.9.4  <- c(6.1062/0.0624, 6.2082/0.0624, 6.0671/0.0646, 6.3980/0.0633, 6.2946/0.0556)
dilStrip.9.4 <- c(2.0213/0.2160, 2.0213/0.2177, 2.0616/0.2176, 2.4565/0.2144, 2.0173/0.2166)
dilFeed.9.5  <- c(6.1840/0.0625, 6.0822/0.0633, 6.2735/0.0623, 6.0341/0.0626, 6.1625/0.0613)
dilStrip.9.5 <- c(2.0086/0.2112, 2.0809/0.2120, 2.2068/0.2136, 2.0597/0.2128, 2.1579/0.2136)
#-----ABSORBANCIAS DE LAS ALÍCUOTAS------------------------------------------
SignalFeed.9.1.Li   <- c(0.305, 0.263, 0.221, 0.155, 0.115, 0.071, 0.043, 0.029, 0.021)
SignalStrip.9.1.Li  <- c(0.002, 0.046, 0.089, 0.193, 0.192, 0.234, 0.263, 0.275, 0.297)
SignalFeed.9.1.Na   <- c(0.376, 0.332, 0.336, 0.352, 0.338)
SignalStrip.9.1.Na  <- c(0.000, 0.043, 0.101, 0.234, 0.366)
SignalFeed.9.2.Li   <- c(0.306, 0.246, 0.192, 0.152, 0.156, 0.157, 0.158, 0.163, 0.167)
SignalStrip.9.2.Li  <- c(0.004, 0.074, 0.131, 0.176, 0.177, 0.174, 0.172, 0.170, 0.170)
SignalFeed.9.2.K    <- c(0.025, 0.024, 0.022, 0.020, 0.018)
SignalStrip.9.2.K   <- c(0.001, 0.025, 0.025, 0.025, 0.025)
SignalFeed.9.3.Li   <- c(0.310, 0.242, 0.200, 0.179, 0.162, 0.131, 0.093, 0.066, 0.055)
SignalStrip.9.3.Li  <- c(0.001, 0.061, 0.107, 0.125, 0.143, 0.175, 0.213, 0.242, 0.256)
SignalFeed.9.3.K    <- c(0.025, 0.024, 0.024, 0.023, 0.023)
SignalStrip.9.3.K   <- c(0.000, 0.002, 0.004, 0.006, 0.008)
SignalFeed.9.4.Li   <- c(0.307, 0.125, 0.052, 0.034, 0.022, 0.010, 0.003, 0.001, 0.000)
SignalStrip.9.4.Li  <- c(0.001, 0.176, 0.246, 0.265, 0.279, 0.287, 0.299, 0.300, 0.300)
SignalFeed.9.4.Na   <- c(0.366, 0.355, 0.367, 0.317, 0.276)
SignalStrip.9.4.Na  <- c(0.000, 0.254, 0.270, 0.357, 0.560)
SignalFeed.9.5.Li   <- c(0.311, 0.255, 0.211, 0.162, 0.127, 0.093, 0.066, 0.032, 0.028)
SignalStrip.9.5.Li  <- c(0.000, 0.060, 0.105, 0.151, 0.180, 0.205, 0.226, 0.250, 0.252)
SignalFeed.9.5.K    <- c(0.024, 0.024, 0.023, 0.024, 0.023)
SignalStrip.9.5.K   <- c(0.001, 0.016, 0.026, 0.026, 0.026)
#-----CONCENTRACIÓN DE ESPECIES EN LAS ALÍCUOTAS-----------------------------
signal2conc(signal = SignalFeed.9.1.Li, model = model.Lith.NaCC.1)
signal2conc(signal = SignalStrip.9.1.Li, model = model.LithiumCC.1)
signal2conc(signal = SignalFeed.9.1.Na, model = model.SodiumCC.1, dilution = dilFeed.9.1)
signal2conc(signal = SignalStrip.9.1.Na, model = model.SodiumCC.1, dilution = dilStrip.9.1)
signal2conc(signal = SignalFeed.9.2.Li, model = model.Lith.KCC.1)
signal2conc(signal = SignalStrip.9.2.Li, model = model.LithiumCC.1)
signal2conc(signal = SignalFeed.9.2.K, model = model.PotasiCC.1, dilution = dilFeed.9.2)
signal2conc(signal = SignalStrip.9.2.K, model = model.PotasiCC.1, dilution = dilStrip.9.2)
signal2conc(signal = SignalFeed.9.3.Li, model = model.Lith.KCC.1)
signal2conc(signal = SignalStrip.9.3.Li, model = model.LithiumCC.1)
signal2conc(signal = SignalFeed.9.3.K, model = model.PotasiCC.1, dilution = dilFeed.9.3)
signal2conc(signal = SignalStrip.9.3.K, model = model.PotasiCC.1, dilution = dilStrip.9.3)
signal2conc(signal = SignalFeed.9.4.Li, model = model.Lith.NaCC.1)
signal2conc(signal = SignalStrip.9.4.Li, model = model.LithiumCC.1)
signal2conc(signal = SignalFeed.9.4.Na, model = model.SodiumCC.1, dilution = dilFeed.9.4)
signal2conc(signal = SignalStrip.9.4.Na, model = model.SodiumCC.1, dilution = dilStrip.9.4)
signal2conc(signal = SignalFeed.9.5.Li, model = model.Lith.KCC.1)
signal2conc(signal = SignalStrip.9.5.Li, model = model.LithiumCC.1)
signal2conc(signal = SignalFeed.9.5.K, model = model.PotasiCC.1, dilution = dilFeed.9.5)
signal2conc(signal = SignalStrip.9.5.K, model = model.PotasiCC.1, dilution = dilStrip.9.5)
#-----CONCENTRACIONES A FRACCIONES-------------------------------------------
conc2frac(feed = ConcFeed.9.1.Li, strip = ConcStrip.9.1.Li, time = Time.9.1)
conc2frac(feed = ConcFeed.9.1.Na, strip = ConcStrip.9.1.Na, time = Time.9.1[c(1, 3, 5, 7, 9)])
conc2frac(feed = ConcFeed.9.2.Li, strip = ConcStrip.9.2.Li, time = Time.9.2)
conc2frac(feed = ConcFeed.9.2.K, strip = ConcStrip.9.2.K, time = Time.9.2[c(1, 3, 5, 7, 9)])
conc2frac(feed = ConcFeed.9.3.Li, strip = ConcStrip.9.3.Li, time = Time.9.3)
conc2frac(feed = ConcFeed.9.3.K, strip = ConcStrip.9.3.K, time = Time.9.3[c(1, 3, 5, 7, 9)])
conc2frac(feed = ConcFeed.9.4.Li, strip = ConcStrip.9.4.Li, time = Time.9.4)
conc2frac(feed = ConcFeed.9.4.Na, strip = ConcStrip.9.4.Na, time = Time.9.4[c(1, 3, 5, 7, 9)])
conc2frac(feed = ConcFeed.9.5.Li, strip = ConcStrip.9.5.Li, time = Time.9.5)
conc2frac(feed = ConcFeed.9.5.K, strip = ConcStrip.9.5.K, time = Time.9.5[c(1, 3, 5, 7, 9)])
#-----MODELOS DE REGRESIÓN NO LINEAL-----------------------------------------
transTrend(Transport.9.1.Li)
transTrend(Transport.9.2.Li)
transTrend(Transport.9.3.Li)
transTrend(Transport.9.4.Li)
transTrend(Transport.9.5.Li)
#-----PERFILES DE TRANSPORTE ------------------------------------------------
# pdf("Natrium.pdf", height = 5, width = 10)
transPlot(trans = Transport.9.1.Li, trend = nls.9.1.Li, secondary = Transport.9.1.Na)
transPlot(trans = Transport.9.2.Li, trend = nls.9.2.Li, secondary = Transport.9.2.K)
transPlot(trans = Transport.9.3.Li, trend = nls.9.3.Li, secondary = Transport.9.3.K)
transPlot(trans = Transport.9.4.Li, trend = nls.9.4.Li, secondary = Transport.9.4.Na)
transPlot(trans = Transport.9.5.Li, trend = nls.9.5.Li, secondary = Transport.9.5.K)
# dev.off()
plot(1:10)
